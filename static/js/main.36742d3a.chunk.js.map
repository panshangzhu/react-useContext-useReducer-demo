{"version":3,"sources":["components/Context.js","components/ComponentB.js","components/ComponentA.js","components/ComponentE.js","components/ComponentD.js","components/ComponentC.js","App.js","serviceWorker.js","index.js"],"names":["initialState","count","CountContext","React","createContext","reducer","state","action","console","log","Context","props","useReducer","dispatch","Provider","value","className","children","ComponentB","useContext","onClick","ComponentA","ComponentE","ComponentD","ComponentC","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAEMA,EAAa,CAACC,MAAM,KAEbC,EAAaC,IAAMC,cAAcJ,GAExCK,EAAQ,SAACC,EAAMC,GACnB,OAAOA,GACL,IAAK,YAEH,OADAC,QAAQC,IAAI,SACL,eAAIH,EAAX,CAAiBL,MAAMK,EAAML,MAAM,IACrC,IAAK,YAEH,OADAO,QAAQC,IAAI,OACL,eAAIH,EAAX,CAAiBL,MAAMK,EAAML,MAAM,IACrC,QACE,SAcSS,MAVf,SAAiBC,GAAQ,IAAD,EACMC,qBAAWP,EAASL,GAD1B,mBACbM,EADa,KACNO,EADM,KAEpB,OACI,kBAACX,EAAaY,SAAd,CAAuBC,MAAO,CAACT,QAAMO,aACnC,wBAAIG,UAAU,UAAd,SAA8BV,EAAML,OACjCU,EAAMM,WCTJC,MAbf,WACI,IAAMjB,EAAMkB,qBAAWjB,GACvB,OACI,wDAEI,6BACA,4BAAQkB,QAAS,kBAAInB,EAAMY,SAAS,eAApC,KACA,4BAAQO,QAAS,kBAAInB,EAAMY,SAAS,eAApC,QCEGQ,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCSGC,MAbf,WACI,IAAMrB,EAAMkB,qBAAWjB,GACvB,OACI,wDAEI,6BACA,4BAAQkB,QAAS,kBAAInB,EAAMY,SAAS,eAApC,KACA,4BAAQO,QAAS,kBAAInB,EAAMY,SAAS,eAApC,QCEGU,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCKGC,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCcGC,MAbf,WACE,OACI,yBAAKT,UAAU,OACf,oDACA,kBAAC,EAAD,KACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.36742d3a.chunk.js","sourcesContent":["import React,{useReducer} from 'react'\r\n\r\nconst initialState={count:100};\r\n\r\nexport const CountContext=React.createContext(initialState);\r\n\r\nconst reducer=(state,action)=>{\r\n  switch(action){\r\n    case 'increment':\r\n      console.log('hello')\r\n      return {...state,count:state.count+1};\r\n    case 'decrement':\r\n      console.log('bye')\r\n      return {...state,count:state.count-1};\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\nfunction Context(props) {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    return (\r\n        <CountContext.Provider value={{state,dispatch}}>\r\n          <h5 className='result'>count:{state.count}</h5>\r\n            {props.children}\r\n        </CountContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Context\r\n","import React,{useContext} from 'react'\r\nimport {CountContext} from './Context'\r\nfunction ComponentB() {\r\n    const count=useContext(CountContext)\r\n    return (\r\n        <div>\r\n            Control from Component B\r\n            <div>\r\n            <button onClick={()=>count.dispatch('increment')}>+</button>\r\n            <button onClick={()=>count.dispatch('decrement')}>-</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComponentB\r\n","import React from 'react'\r\nimport ComponentB from './ComponentB';\r\n\r\nfunction ComponentA() {\r\n    return (\r\n        <div>\r\n            <ComponentB />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComponentA\r\n","import React,{useContext} from 'react'\r\nimport {CountContext} from './Context'\r\nfunction ComponentE() {\r\n    const count=useContext(CountContext)\r\n    return (\r\n        <div>\r\n            Control from Component E\r\n            <div>\r\n            <button onClick={()=>count.dispatch('increment')}>+</button>\r\n            <button onClick={()=>count.dispatch('decrement')}>-</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComponentE\r\n","import React from 'react'\r\nimport ComponentE from './ComponentE'\r\n\r\nfunction ComponentD() {\r\n    return (\r\n        <div>\r\n            <ComponentE />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComponentD\r\n","import React from 'react'\r\nimport ComponentD from './ComponentD'\r\n\r\nfunction ComponentC() {\r\n    return (\r\n        <div>\r\n            <ComponentD />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComponentC\r\n","import React from 'react';\nimport './App.css';\nimport ComponentA from './components/ComponentA';\nimport ComponentC from './components/ComponentC';\nimport Context from './components/Context'\n\n\nfunction App() {\n  return (\n      <div className=\"App\">\n      <h1>Pan Number Counter  </h1>\n      <Context>\n      <ComponentA />\n      <ComponentC />\n      </Context>\n      </div>\n     \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}